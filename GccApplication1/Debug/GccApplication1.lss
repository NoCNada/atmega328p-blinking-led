
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000106  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000017a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006fc  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064b  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000265  00000000  00000000  00000f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  000011d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000395  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  000015c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001605  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  88:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_16>:
 volatile uint8_t timeOut250msAprox;
uint8_t flagByte;
//.

// interrupciones
ISR(TIMER0_OVF_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
	timeOut250msAprox--;
  9c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timeOut250msAprox>
  a0:	81 50       	subi	r24, 0x01	; 1
  a2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timeOut250msAprox>
	if(!timeOut250msAprox){
  a6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timeOut250msAprox>
  aa:	81 11       	cpse	r24, r1
  ac:	0c c0       	rjmp	.+24     	; 0xc6 <__vector_16+0x36>
		timeOut250msAprox = 25;
  ae:	89 e1       	ldi	r24, 0x19	; 25
  b0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timeOut250msAprox>
		//(1 << PORTB5 1) desplazado por B5 es igual a 00100000
		if(PORTB & (1 << PORTB5)) //desplazo al numero 1 cinco veces para que aparezca en la posicion 5
  b4:	2d 9b       	sbis	0x05, 5	; 5
  b6:	04 c0       	rjmp	.+8      	; 0xc0 <__vector_16+0x30>
			PORTB &= ~(1 << PORTB5); //~ (1 << PORTB5) = 11011111 hago cero el bit 5 de PORTB5
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	8f 7d       	andi	r24, 0xDF	; 223
  bc:	85 b9       	out	0x05, r24	; 5
  be:	03 c0       	rjmp	.+6      	; 0xc6 <__vector_16+0x36>
		else
			PORTB |= (1 << PORTB5);
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	80 62       	ori	r24, 0x20	; 32
  c4:	85 b9       	out	0x05, r24	; 5
		}
}
  c6:	8f 91       	pop	r24
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <initPort>:
//.

// 
void initPort(){
    //Configuro Pin del LED como salida (PB5 Arduino uno)
    DDRB = (1 << DDB5);
  d2:	80 e2       	ldi	r24, 0x20	; 32
  d4:	84 b9       	out	0x04, r24	; 4
    
    PORTB |= (1 << PORTB5);
  d6:	85 b1       	in	r24, 0x05	; 5
  d8:	80 62       	ori	r24, 0x20	; 32
  da:	85 b9       	out	0x05, r24	; 5
  dc:	08 95       	ret

000000de <initTimers>:

}

void initTimers(){
	TCCR0A = 0x00;
  de:	14 bc       	out	0x24, r1	; 36
	TIFR0 = TIFR0;
  e0:	85 b3       	in	r24, 0x15	; 21
  e2:	85 bb       	out	0x15, r24	; 21
	TIMSK0 = (1 << TOIE0);
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCCR0B = 0x05;
  ea:	85 e0       	ldi	r24, 0x05	; 5
  ec:	85 bd       	out	0x25, r24	; 37
  ee:	08 95       	ret

000000f0 <main>:
	
}

int main(void)
{
	timeOut250msAprox = 15;    
  f0:	8f e0       	ldi	r24, 0x0F	; 15
  f2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timeOut250msAprox>
	initPort();
  f6:	0e 94 69 00 	call	0xd2	; 0xd2 <initPort>
	initTimers();
  fa:	0e 94 6f 00 	call	0xde	; 0xde <initTimers>
	

	sei(); // pongo en 1 el bit 7 del Status
  fe:	78 94       	sei
 100:	ff cf       	rjmp	.-2      	; 0x100 <main+0x10>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
